#  count feature values in the given string main

dimension = 5

def calsub(main,sub):
	if(sub[::-1] == sub):
		return main.count(sub)
	else:
		return main.count(sub) + main.count(sub[::-1])
def calculatefeature(main,sub):

	count = 0
	temp = sub
	for i in xrange(0,len(main)-len(sub) + 1):
		found = False
		sub = temp
		# print sub
		for j in xrange(i,i+len(sub)):

			if(sub[j-i] != '-'):
				if(main[j] != sub[j-i]):
					found = True
			else:
				sub = sub.replace('-',main[j])
		if(found == False):
			count += 1
	return count

def shortstring(main):
	if(main[0] == '-'):
		return shortstring(main[1::])
	elif(main[len(main)-1] == '-'):
		return shortstring(main[0:len(main)-1])
	else:
		return main

def placedash(a,b,start):
	c = a
	if(calsub(a,start) != 2):
		for i in xrange(0,len(c)):
			a = list(a)
			a[i] = '-'
			a = ''.join(a)
			a = shortstring(a)
			if (a not in b) and (a[::-1] not in b):
				b.append(a)
			a = c
		return b
	else:
		return b

def generate_feature(start_string):
	init_string = start_string*dimension
	lis = [init_string]
	for elem in lis:
		lis = placedash(elem,lis,start_string)
	return lis

# print placedash('AA',[])

def generate_all_features():
	lis = []
	for i in xrange(65,65+dimension):
		lis += generate_feature(chr(i))
	return lis

def listjoin(a,b):
	# print a,b, "for listjoin"
	return map(lambda x: a+x,b)

def makeall(b):
	# print b[0]
	if len(b[0])==5:
		return b
	else:
		return makeall(listjoin("A",b)+listjoin("B",b)+listjoin("C",b)+listjoin("D",b)+listjoin("E",b)+listjoin("-",b))

allstr= makeall([""])

def onlyleafstrings(allstr):
	lis = []
	for elem in allstr:
		if(calsub(elem,'-') == 0):
			lis.append(elem)
	return lis

#  maps string to feature list
feature_hashtable = {}
#  list of training examples
lis = onlyleafstrings(allstr)
lis_features = generate_all_features()
print lis_features
# x= raw_input()
# par_list = [1.0 for i in xrange(0,len(lis_features))]
# par_list = [0.601418421791,0.08154711602,0.0342473000512,2.42799530109,-0.270156507477,-0.134242932178,0.508995968099,2.27771734787,2.02477504516,3.2636314853,3.75462323741,2.5382039448,0.601418421791,0.08154711602,0.0342473000512,2.42799530109,-0.270156507477,-0.134242932178,0.508995968099,2.27771734787,2.02477504516,3.2636314853,3.75462323741,2.5382039448,0.601418421791,0.08154711602,0.0342473000512,2.42799530109,-0.270156507477,-0.134242932178,0.508995968099,2.27771734787,2.02477504516,3.2636314853,3.75462323741,2.5382039448,0.601418421791,0.08154711602,0.0342473000512,2.42799530109,-0.270156507477,-0.134242932178,0.508995968099,2.27771734787,2.02477504516,3.2636314853,3.75462323741,2.5382039448,0.601418421791,0.08154711602,0.0342473000512,2.42799530109,-0.270156507477,-0.134242932178,0.508995968099,2.27771734787,2.02477504516,3.2636314853,3.75462323741,2.5382039448]
# par_list = [0.12154169865,-0.407332999606,-0.428963118041,3.21624335582,-0.166673479279,-0.110354201035,-0.0203241557908,2.85292411467,2.00438151854,3.24251226651,3.88531582325,3.31534382199,0.12154169865,-0.407332999606,-0.428963118041,3.21624335582,-0.166673479279,-0.110354201035,-0.0203241557908,2.85292411467,2.00438151854,3.24251226651,3.88531582325,3.31534382199,0.12154169865,-0.407332999606,-0.428963118041,3.21624335582,-0.166673479279,-0.110354201035,-0.0203241557908,2.85292411467,2.00438151854,3.24251226651,3.88531582325,3.31534382199,0.12154169865,-0.407332999606,-0.428963118041,3.21624335582,-0.166673479279,-0.110354201035,-0.0203241557908,2.85292411467,2.00438151854,3.24251226651,3.88531582325,3.31534382199,0.12154169865,-0.407332999606,-0.428963118041,3.21624335582,-0.166673479279,-0.110354201035,-0.0203241557908,2.85292411467,2.00438151854,3.24251226651,3.88531582325,3.31534382199]
# par_list = [-3.6324781619,-0.734180663024,-0.750220073595,4.43460034122,-0.0219343080616,-0.0709614298691,-0.481980483213,3.9036461794,1.96962742735,3.20207535526,4.05795262406,4.38709182362,-3.6324781619,-0.734180663024,-0.750220073595,4.43460034122,-0.0219343080616,-0.0709614298691,-0.481980483213,3.9036461794,1.96962742735,3.20207535526,4.05795262406,4.38709182362,-3.6324781619,-0.734180663024,-0.750220073595,4.43460034122,-0.0219343080616,-0.0709614298691,-0.481980483213,3.9036461794,1.96962742735,3.20207535526,4.05795262406,4.38709182362,-3.6324781619,-0.734180663024,-0.750220073595,4.43460034122,-0.0219343080616,-0.0709614298691,-0.481980483213,3.9036461794,1.96962742735,3.20207535526,4.05795262406,4.38709182362,-3.6324781619,-0.734180663024,-0.750220073595,4.43460034122,-0.0219343080616,-0.0709614298691,-0.481980483213,3.9036461794,1.96962742735,3.20207535526,4.05795262406,4.38709182362]
# par_list = [-4.1247906163,-0.66262920401,-0.689995849508,4.48748960264,-0.0308435243571,-0.0798006886666,-0.438868041987,3.95054117814,1.96956270246,3.20083473682,4.05456938823,4.43895269613,-4.1247906163,-0.66262920401,-0.689995849508,4.48748960264,-0.0308435243571,-0.0798006886666,-0.438868041987,3.95054117814,1.96956270246,3.20083473682,4.05456938823,4.43895269613,-4.1247906163,-0.66262920401,-0.689995849508,4.48748960264,-0.0308435243571,-0.0798006886666,-0.438868041987,3.95054117814,1.96956270246,3.20083473682,4.05456938823,4.43895269613,-4.1247906163,-0.66262920401,-0.689995849508,4.48748960264,-0.0308435243571,-0.0798006886666,-0.438868041987,3.95054117814,1.96956270246,3.20083473682,4.05456938823,4.43895269613,-4.1247906163,-0.66262920401,-0.689995849508,4.48748960264,-0.0308435243571,-0.0798006886666,-0.438868041987,3.95054117814,1.96956270246,3.20083473682,4.05456938823,4.43895269613]
# par_list = [-7.27551868994,-0.184711180702,-0.287706821576,4.81644756567,-0.0937517947637,-0.139935560094,-0.157024442704,4.231611597,1.9699390797,3.19373707068,4.02978074999,4.77008414655,-7.27551868994,-0.184711180702,-0.287706821576,4.81644756567,-0.0937517947637,-0.139935560094,-0.157024442704,4.231611597,1.9699390797,3.19373707068,4.02978074999,4.77008414655,-7.27551868994,-0.184711180702,-0.287706821576,4.81644756567,-0.0937517947637,-0.139935560094,-0.157024442704,4.231611597,1.9699390797,3.19373707068,4.02978074999,4.77008414655,-7.27551868994,-0.184711180702,-0.287706821576,4.81644756567,-0.0937517947637,-0.139935560094,-0.157024442704,4.231611597,1.9699390797,3.19373707068,4.02978074999,4.77008414655,-7.27551868994,-0.184711180702,-0.287706821576,4.81644756567,-0.0937517947637,-0.139935560094,-0.157024442704,4.231611597,1.9699390797,3.19373707068,4.02978074999,4.77008414655]
par_list = [-7.9369138499,-0.0838688904306,-0.202810720143,4.88530824061,-0.107115090093,-0.152659432883,-0.0978069068961,4.29010428636,1.97003880217,3.19226947018,4.02450795911,4.83963607955,-7.9369138499,-0.0838688904306,-0.202810720143,4.88530824061,-0.107115090093,-0.152659432883,-0.0978069068961,4.29010428636,1.97003880217,3.19226947018,4.02450795911,4.83963607955,-7.9369138499,-0.0838688904306,-0.202810720143,4.88530824061,-0.107115090093,-0.152659432883,-0.0978069068961,4.29010428636,1.97003880217,3.19226947018,4.02450795911,4.83963607955,-7.9369138499,-0.0838688904306,-0.202810720143,4.88530824061,-0.107115090093,-0.152659432883,-0.0978069068961,4.29010428636,1.97003880217,3.19226947018,4.02450795911,4.83963607955,-7.9369138499,-0.0838688904306,-0.202810720143,4.88530824061,-0.107115090093,-0.152659432883,-0.0978069068961,4.29010428636,1.97003880217,3.19226947018,4.02450795911,4.83963607955]
value = {}

def populatefeaturehashtable():
	global feature_hashtable,lis_features,lis
	# lis = onlyleafstrings(allstr)
	# lis = ['AAAAA']
	# lis_features = generate_all_features()
	for elem in lis:
		l = []
		for el in lis_features:
			l.append(calculatefeature(elem,el))
		feature_hashtable[elem] = l



def checkpalindrome(s):
	return s==s[::-1]

def checkvalidpalindrome(s):
	if checkpalindrome(s):
		for i in s:
			if i=="-":
				return 0
		return len(s)
	return 0

def scorestring(a):
	ans =0
	for i in xrange(len(a)):
		for j in xrange(i+2,len(a)+1):
			ans +=checkvalidpalindrome(a[i:j])
	return ans

mapped1 = map(scorestring,lis)
# print mapped1

def populate_value():
	global value,mapped1,lis
	for i in xrange(0,len(lis)):
		value[lis[i]] = mapped1[i]


def hypothesis(feature_vector):
	global par_list
	hyp = 0.0
	for i in xrange(0,len(par_list)):
		hyp += par_list[i]*feature_vector[i]
	return hyp

def error_func():
	global lis,value,lis_features,feature_hashtable
	error = 0.0
	for i in xrange(0,len(lis)):
		error += (hypothesis(feature_hashtable[lis[i]]) - value[lis[i]])**2
	return error/(2*len(lis))

def derivative(j):
	global lis,value,feature_hashtable
	error = 0.0
	for i in xrange(0,len(lis)):
		error += (hypothesis(feature_hashtable[lis[i]]) - value[lis[i]])*feature_hashtable[lis[i]][j]
	return error/(len(lis))



def writelist(i):
	global par_list
	f = open("Parameters.txt",'a')
	f.write('Iteration no.: ' + str(i) + '\n')
	for j in xrange(0,len(par_list)):
		if(j==len(par_list)-1):
			f.write(str(par_list[j]) + '\n\n')
		else:
			f.write(str(par_list[j]) + ',')
	f.close()

def grad_descent(learning_rate):
	global par_list
	counter = 0
	while(counter < 10000):
		new_parlist = []
		for i in xrange(0,len(lis_features)):
			new_parlist.append(par_list[i] - learning_rate*derivative(i))
		par_list = new_parlist
		f = open('log.txt','a')
		f.write('Iteration no.: ' + str(counter) + '\t')
		f.write(str(error_func()) + '\n')
		f.close()
		writelist(counter)
		counter += 1
	return par_list


populatefeaturehashtable()
populate_value()
print lis
print feature_hashtable
# grad_descent(0.99)





# print len(par_list) == len(lis_features)
# def hyptothesis



# print len(onlyleafstrings(allstr))
# # print generate_feature('B')
# print len(generate_all_features())

# populatefeaturehashtable()

# print feature_hashtable

# print calculatefeature('DDEAE','E-E')




	

